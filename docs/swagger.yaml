definitions:
  handler.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  model.UserInfo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      sayHello:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.UserModel:
    properties:
      password:
        maxLength: 128
        minLength: 5
        type: string
      username:
        maxLength: 32
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  user.CreateRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.CreateResponse:
    properties:
      username:
        type: string
    type: object
  user.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.LoginResponse:
    properties:
      token:
        type: string
    type: object
  user.SwaggerListResponse:
    properties:
      totalCount:
        type: integer
      userList:
        items:
          $ref: '#/definitions/model.UserInfo'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    email: 466701708@qq.com
    name: lkong
    url: http://www.swagger.io/support
  description: apiserver demo
  title: Apiserver Example API
  version: "1.0"
paths:
  /login:
    post:
      parameters:
      - description: Password
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ"}}'
          schema:
            $ref: '#/definitions/user.LoginResponse'
      summary: Login generates the authentication token
  /sd/cpu:
    get:
      consumes:
      - application/json
      description: Checks the cpu usage
      produces:
      - application/json
      responses:
        "200":
          description: 'CRITICAL - Load average: 1.78, 1.99, 2.02 | Cores: 2'
          schema:
            type: string
      summary: Checks the cpu usage
      tags:
      - sd
  /sd/disk:
    get:
      consumes:
      - application/json
      description: Checks the disk usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 17233MB (16GB) / 51200MB (50GB) | Used: 33%'
          schema:
            type: string
      summary: Checks the disk usage
      tags:
      - sd
  /sd/health:
    get:
      consumes:
      - application/json
      description: Shows OK as the ping-pong result
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Shows OK as the ping-pong result
      tags:
      - sd
  /sd/ram:
    get:
      consumes:
      - application/json
      description: Checks the ram usage
      produces:
      - application/json
      responses:
        "200":
          description: 'OK - Free space: 402MB (0GB) / 8192MB (8GB) | Used: 4%'
          schema:
            type: string
      summary: Checks the ram usage
      tags:
      - sd
  /v1/user:
    get:
      consumes:
      - application/json
      description: get users
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: offset
        in: query
        name: offset
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: "{\"code\":0,\"message\":\"OK\",\"data\":{\"totalCount\":1,\"userList\":[{\"id\":0,\"username\":\"admin\",\"random\":\"user\t'admin'\tget\trandom\tstring\t'EnqntiSig'\",\"password\":\"$2a$10$veGcArz47VGj7l9xN7g2iuT9TF21jLI1YGXarGzvARNdnt4inC9PG\",\"createdAt\":\"2018-05-28\t00:25:33\",\"updatedAt\":\"2018-05-28\t00:25:33\"}]}}"
          schema:
            $ref: '#/definitions/user.SwaggerListResponse'
      security:
      - JWT: []
      summary: List the users in the database
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Create a new user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong"}}'
          schema:
            $ref: '#/definitions/user.CreateResponse'
      security:
      - JWT: []
      summary: Add new user to the database
      tags:
      - user
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - JWT: []
      summary: Delete an user by the user identifier
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: The user's database id index num
        in: path
        name: id
        required: true
        type: integer
      - description: The user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserModel'
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":null}'
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - JWT: []
      summary: Update a user info by the user identifier
      tags:
      - user
  /v1/user/{username}:
    get:
      consumes:
      - application/json
      description: Get an user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"code":0,"message":"OK","data":{"username":"kong","password":"$2a$10$E0kwtmtLZbwW/bDQ8qI8e.eHPqhQOW9tvjwpyo/p05f/f4Qvr3OmS"}}'
          schema:
            $ref: '#/definitions/model.UserModel'
      security:
      - JWT: []
      summary: Get an user by the user identifier
      tags:
      - user
securityDefinitions:
  JWT:
    description: 请在token字符串前加`Bearer+空格`
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
